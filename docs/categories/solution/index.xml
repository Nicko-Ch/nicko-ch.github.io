<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Solution on &gt; $ cd /home</title>
    <link>https://nicko-ch.github.io/categories/solution/</link>
    <description>Recent content in Solution on &gt; $ cd /home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 03 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://nicko-ch.github.io/categories/solution/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>分布式缓存</title>
      <link>https://nicko-ch.github.io/posts/solution/20221203-%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/</link>
      <pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://nicko-ch.github.io/posts/solution/20221203-%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/</guid>
      <description>分布式缓存 Hash算法 简述 对资源进行取模运算：hash(资源) % 机器数 = 余数
然后去余数对应的服务器存取资源
缺点：一旦机器数量变更，将导致所有缓存失效
一致性Hash 简述 设置一个Hash环，大小为2^32
对资源进行取模运算：hash(资源) % 2^32 = 余数
然后顺时针的往下寻找服务器
优点：相较于hash算法，激起数量的变更，一致性hash只会导致部分缓存失效
缺点：因为不均衡，产生hash偏斜，可能会导致大量缓存跑到某一台服务器
Hash偏斜 解决方法：新增虚拟节点，让分布尽可能均匀</description>
    </item>
    
    <item>
      <title>限流算法</title>
      <link>https://nicko-ch.github.io/posts/solution/20221112-%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 12 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://nicko-ch.github.io/posts/solution/20221112-%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/</guid>
      <description>限流算法 1 漏桶算法 假设当前请求b到来，at为上一次请求处理时间，w为剩余容量，c为总容量，r为滴漏速度
伪代码 when(b): bt = now() // b到来时间为当前时间 	wb = (bt - at) * r // b到来的过程量=（b时间 - 上一次请求时间）* 流速 	w = max(w - wb, 0) // 剩余容量 = 最大值（剩余容量 - wb带来的容量，0） 木桶剩余最小为0 if(w &amp;lt; c) // 如果剩余容量未满 	w++ // 剩余容量++ 	return true else: return false 2 令牌桶算法 假设当前请求b到来，at为上一次请求处理时间，w为剩余容量，c为总容量，r为滴漏速度
伪代码 when(b): bt = now() // b到来时间为当前时间 	wb = (bt - at) * r // b到来的过程量=（b时间 - 上一次请求时间）* 流速 	w = min(w + wb, c) // 剩余容量 = 最小值（剩余容量 + wb带来的容量，c） if (w &amp;gt; 1): // 如果桶内令牌大于1 	w-- // 令牌-- 	return true else: return false 3 比较 放入速度</description>
    </item>
    
    <item>
      <title>分布式唯一ID</title>
      <link>https://nicko-ch.github.io/posts/solution/20210408-%E5%88%86%E5%B8%83%E5%BC%8F%E5%94%AF%E4%B8%80id/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nicko-ch.github.io/posts/solution/20210408-%E5%88%86%E5%B8%83%E5%BC%8F%E5%94%AF%E4%B8%80id/</guid>
      <description>1. 为什么要用分布式ID 1.1 什么是分布式ID 拿MySQL数据库举个栗子：
在我们业务数据量不大的时候，单库单表完全可以支撑现有业务，数据再大一点搞个MySQL主从同步读写分离也能对付。
但随着数据日渐增长，主从同步也扛不住了，就需要对数据库进行分库分表，但分库分表后需要有一个唯一ID来标识一条数据，数据库的自增ID显然不能满足需求；特别一点的如订单、优惠券也都需要有唯一ID做标识。此时一个能够生成全局唯一ID的系统是非常必要的。那么这个全局唯一ID就叫分布式ID。
1.2 那么分布式ID需要满足那些条件？  全局唯一：必须保证ID是全局性唯一的，基本要求 高性能：高可用低延时，ID生成响应要块，否则反倒会成为业务瓶颈 高可用：100%的可用性是骗人的，但是也要无限接近于100%的可用性 好接入：要秉着拿来即用的设计原则，在系统设计和实现上要尽可能的简单 趋势递增：最好趋势递增，这个要求就得看具体业务场景了，一般不严格要求  2. 分布式ID都有哪些生成方式 2.1 UUID 优点：
 生成足够简单，本地生成无网络消耗，具有唯一性  缺点：
 无序的字符串，不具备自增特性 没有具体的业务含义 长度较大，不适合作为数据库主键，严重影响查询性能  2.2 数据库自增ID 优点：
 实现简单，ID主键，数值类型，带自增特性  缺点：
 DB单机生成，存在并发宕机风险，无法扛住高并发场景  2.3 数据库集群模式 为了应对单机数据库的并发压力，设计上可以用双主模式集群的方式解决，但是这样也会引入一个新的问题，两个Mysql实例都是自增ID从1开始，会产生重复的ID怎么办？
解决方案：设置起始值和自增步长
MySQL_1 配置：
set @@auto_increment_offset = 1; -- 起始值set @@auto_increment_increment = 2; -- 步长MySQL_2 配置：
set @@auto_increment_offset = 2; -- 起始值set @@auto_increment_increment = 2; -- 步长这样两个MySQL实例的自增ID分别就是：</description>
    </item>
    
  </channel>
</rss>
