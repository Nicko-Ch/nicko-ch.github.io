<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Redis on &gt; $ cd /home</title>
    <link>https://nicko-ch.github.io/categories/redis/</link>
    <description>Recent content in Redis on &gt; $ cd /home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 16 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://nicko-ch.github.io/categories/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设计与实现</title>
      <link>https://nicko-ch.github.io/posts/redis/20220916-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 16 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://nicko-ch.github.io/posts/redis/20220916-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>设计与实现 前言 查询数据类型 OBJECT ENCODING {key} 1. 基础数据类型 1.1 SDS 与 C字符串 区别 1.1.1 SDS简单动态字符串定义 struct sdshdr{ //记录buf数组中已使用字节的数量  //等于 SDS 保存字符串的长度  int len; //记录 buf 数组中未使用字节的数量  int free; //字节数组，用于保存字符串  char buf[]; } 1.1.2 可重用C函数 SDS遵循与C语言字符串一样的规则，以‘\0’(空字符)结尾，所以SDS可以直接重用部分C语言的字符串函数。（空字符不计入len属性，所以对于SDS使用者完全透明）
1.1.3 二进制安全 泛指二进制数据在传输、存储、读取的时候都不会被篡改，如C语言中的字符串类型必须为空字符（\0）结束，则后续如果跟有其他数据，则读取处理将会跟原数据不同，即非二进制安全
例如：
在C语言中读取会返回“Redis”，空字符往后的则被忽略。 而在Redis中读取会返回“Redis Cluster ”，以len属性判断字符串是否结束
1.1.4 获取长度 C语言字符串获取长度，需要遍历字符串中的每一位进行累加计算，时间复杂度为O(N)
SDS获取长度，只需要直接获取len属性，时间复杂度为O(1)
1.1.5 杜绝缓冲区溢出  C字符串中，如果未给变量申请足够的空间，进行了如srtcat复制操作，将可能导致新字符串过长，导致变量内存内容被覆盖。 与C语言不同，SDS会闲计算自身空间，如果不足会自动扩展。  1.1.6 空间预分配 为了防止频繁的进行空间分配，SDS每次扩容的时候都会进行一定的冗余扩充
 如果对 SDS 进行修改之后， SDS 的长度（也即是 len 属性的值）将小于 1 MB ， 那么程序分配和 len 属性同样大小的未使用空间， 这时 SDS len 属性的值将和 free 属性的值相同。 举个例子， 如果进行修改之后， SDS 的 len 将变成 13 字节， 那么程序也会分配13 字节的未使用空间， SDS 的 buf 数组的实际长度将变成 13 + 13 + 1 = 27 字节（额外的一字节用于保存空字符）。 如果对 SDS 进行修改之后， SDS 的长度将大于等于 1 MB ， 那么程序会分配 1 MB 的未使用空间。 举个例子， 如果进行修改之后， SDS 的 len 将变成 30 MB ， 那么程序会分配 1 MB 的未使用空间， SDS 的 buf 数组的实际长度将为 30 MB + 1 MB + 1 byte 。  1.</description>
    </item>
    
  </channel>
</rss>
