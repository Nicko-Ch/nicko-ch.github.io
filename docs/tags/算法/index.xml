<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>算法 on &gt; $ cd /home</title>
    <link>https://nicko-ch.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on &gt; $ cd /home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 12 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://nicko-ch.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>限流算法</title>
      <link>https://nicko-ch.github.io/posts/solution/20221112-%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 12 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://nicko-ch.github.io/posts/solution/20221112-%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/</guid>
      <description>限流算法 1 漏桶算法 假设当前请求b到来，at为上一次请求处理时间，w为剩余容量，c为总容量，r为滴漏速度
伪代码 when(b): bt = now() // b到来时间为当前时间 	wb = (bt - at) * r // b到来的过程量=（b时间 - 上一次请求时间）* 流速 	w = max(w - wb, 0) // 剩余容量 = 最大值（剩余容量 - wb带来的容量，0） 木桶剩余最小为0 if(w &amp;lt; c) // 如果剩余容量未满 	w++ // 剩余容量++ 	return true else: return false 2 令牌桶算法 假设当前请求b到来，at为上一次请求处理时间，w为剩余容量，c为总容量，r为滴漏速度
伪代码 when(b): bt = now() // b到来时间为当前时间 	wb = (bt - at) * r // b到来的过程量=（b时间 - 上一次请求时间）* 流速 	w = min(w + wb, c) // 剩余容量 = 最小值（剩余容量 + wb带来的容量，c） if (w &amp;gt; 1): // 如果桶内令牌大于1 	w-- // 令牌-- 	return true else: return false 3 比较 放入速度</description>
    </item>
    
    <item>
      <title>算法系列 - 快速排序</title>
      <link>https://nicko-ch.github.io/posts/computer-principles/%E7%AE%97%E6%B3%95/20220418-%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://nicko-ch.github.io/posts/computer-principles/%E7%AE%97%E6%B3%95/20220418-%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid>
      <description>描述 快速排序是对插入算法的一种优化，利用对问题的二分化，实现递归完成快速排序 ，在所有算法中二分化是最常用的方式，将问题尽量的分成两种情况加以分析， 最终以形成类似树的方式加以利用，因为在比较模型中的算法中，最快的排序时间复杂度为 O(log~n~).
原理  选取边界值：temp 遍历比较数组中每个值与边界值大小关系：小于边界值放小于数组，大于边界值放大于数组 递归排序大、小数组 合并返回当前已排完序数组  PS：注意递归结束条件，数组中长度小于2，代表
package main import &amp;#34;fmt&amp;#34; func main() { sortSlice := quickSort([]int{1, 9, 10, 30, 2, 5, 45, 8, 63, 234, 12}) fmt.Println(sortSlice) } func quickSort(arr []int) []int { if len(arr) &amp;lt;= 2 { return arr } temp := arr[0] var low, high = make([]int, 0), make([]int, 0) for i := 1; i &amp;lt; len(arr); i++ { if arr[i] &amp;lt; temp { low = append(low, arr[i]) } else { high = append(high, arr[i]) } } lowSlice := quickSort(low) highSlice := quickSort(high) return append(append(lowSlice, temp), highSlice.</description>
    </item>
    
  </channel>
</rss>
