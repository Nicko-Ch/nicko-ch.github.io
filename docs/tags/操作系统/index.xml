<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>操作系统 on &gt; $ cd /home</title>
    <link>https://nicko-ch.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
    <description>Recent content in 操作系统 on &gt; $ cd /home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 22 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://nicko-ch.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>计算机考研408 - I/O多路复用</title>
      <link>https://nicko-ch.github.io/posts/computer-principles/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/20220822-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</link>
      <pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://nicko-ch.github.io/posts/computer-principles/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/20220822-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</guid>
      <description>I/O多路复用 1、什么是I/O多路复用  **单线程或单进程同时监测若干个文件描述符是否可以执行IO操作的能力**
 2、流？I/O操作？阻塞？ （1）流  可以进行I/O操作的内核对象 文件、管道、套接字…… 流的入口：文件描述符(fd)  （2）I/O操作 所有对流的读写操作，我们都可以称之为IO操作。
（3）阻塞 阻塞场景: 你有一份快递，家里有个座机，快递到了主动给你打电话，期间你可以休息。
非阻塞，忙轮询场景: 你性子比较急躁， 每分钟就要打电话询问快递小哥一次， 到底有没有到，快递员接你电话要停止运输，这样很耽误快递小哥的运输速度。
3、解决阻塞等待办法 （1）非阻塞、忙轮询 伪代码 while true { for i in 流[] { if i has 数据 { 读 或者 其他处理 } } } 特点  用户态不断请求内核态查看IO情况 请求间隔短会导致cpu无效占用率高 请求间隔长会导致io长时间无法处理  （2）select 伪代码 while true { select(流[]); //阻塞  //有消息抵达 	for i in 流[] { if i has 数据 { 读 或者 其他处理 } } } 特点  时间复杂度O(n) 开设一个代接收点，待内核态有io处理信号，则返回告诉用户 select只能通知用户IO事件发生，无法准确告诉是哪个IO流待处理，需要用户遍历查找 实现底层用的数组结构，理论上有最大连接数：1024(x86) 或 2048(x64) 每次调用select，都需要把集合fd从用户态拷贝到内核态  （3）poll 原理与select类似，但实现底层结构更换为链表，理论上没有最大连接数限制</description>
    </item>
    
  </channel>
</rss>
