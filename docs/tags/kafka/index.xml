<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kafka on &gt; $ cd /home</title>
    <link>https://nicko-ch.github.io/tags/kafka/</link>
    <description>Recent content in Kafka on &gt; $ cd /home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 12 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://nicko-ch.github.io/tags/kafka/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kafa核心技术与实战</title>
      <link>https://nicko-ch.github.io/posts/202104120000/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nicko-ch.github.io/posts/202104120000/</guid>
      <description>概述 基本名词 Producer (消息生产者)：
向 kafka broker 发消息的客户端；
Consumer (消息消费者)：
向 kafka broker 取消息的客户端；
Consumer Group (消费者组)：
由多个 consumer 组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。
Broker (服务器)：
一台 kafka 服务器就是一个 broker。一个集群由多个 broker 组成。一个broker可以容纳多个 topic。
Replica (副本)：
为保证集群中的某个节点发生故障时，该节点上的 partition 数据不丢失，且 kafka 仍然能够继续工作，kafka 提供了副本机制，一个 topic 的每个分区都有若干个副本，一个 leader 和若干个 follower。
Leader (主)：
每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对 象都是 leader。
Follower (从)：
每个分区多个副本中的“从”，实时从 leader 中同步数据，保持和 leader 数据的同步。leader 发生故障时，某个 follower 会成为新的 leader 。
Topic (主题)：
主题是承载消息的逻辑容器，在实际使用中多用来区分具体的业务。
Partition (分区)：
为了实现扩展性，一个非常大的 topic 可以分布到多个 broker（即服务器）上，一个 topic 可以分为多个 partition，每个 partition 是一个有序的队列；</description>
    </item>
    
  </channel>
</rss>
