<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Golang on &gt; $ cd /home</title>
    <link>https://nicko-ch.github.io/tags/golang/</link>
    <description>Recent content in Golang on &gt; $ cd /home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 21 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://nicko-ch.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go高级编程 - 单元测试用例</title>
      <link>https://nicko-ch.github.io/posts/golang/20220321-go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://nicko-ch.github.io/posts/golang/20220321-go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</guid>
      <description>单元测试用例 文件命名规则 单元测试需要创建单独的测试文件，不能在原有文件中书写，名字规则为 xxx_test.go。这个规则很好理解。
包命名规则 单元测试文件的包名为原文件的包名添加下划线接test，举例如下：
// 原文件包名：  package xxx // 单元测试文件包名：  package xxx_test 方法命名规则 单元测试文件中的测试方法和原文件中的待测试的方法名相对应，以Test开头，举例如下：
// 原文件方法： func Xxx(name string) error // 单元测试文件方法： func TestXxx() 方法参数 单元测试方法的参数必须是t *testing.T，举例如下：
func TestZipFiles(t *testing.T) { ... 命令行执行 *go test **-v** cdfPrint_test.go **-run** TestPrintCDF // **-v** 指定文件 // **-run** 指定函数* </description>
    </item>
    
    <item>
      <title>Go高级编程 - Golang中Defer必掌握的7知识点</title>
      <link>https://nicko-ch.github.io/posts/golang/20220108-go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B-golang%E4%B8%ADdefer%E5%BF%85%E6%8E%8C%E6%8F%A1%E7%9A%847%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://nicko-ch.github.io/posts/golang/20220108-go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B-golang%E4%B8%ADdefer%E5%BF%85%E6%8E%8C%E6%8F%A1%E7%9A%847%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>Golang中Defer必掌握的7知识点 知识点1：defer的执行顺序 多个defer出现的时候，它是一个“栈”的关系，也就是先进后出。一个函数中，写在前面的defer会比写在后面的defer调用的晚。
package main import &amp;#34;fmt&amp;#34; func main() { defer func1() defer func2() defer func3() } func func1() { fmt.Println(&amp;#34;A&amp;#34;) } func func2() { fmt.Println(&amp;#34;B&amp;#34;) } func func3() { fmt.Println(&amp;#34;C&amp;#34;) } 输出结果：
C B A 结论为：先压栈后出栈
知识点2：defer与return谁先谁后 package main import &amp;#34;fmt&amp;#34; func deferFunc() int { fmt.Println(&amp;#34;defer func called&amp;#34;) return 0 } func returnFunc() int { fmt.Println(&amp;#34;return func called&amp;#34;) return 0 } func returnAndDefer() int { defer deferFunc() return returnFunc() } func main() { returnAndDefer() } 输出结果：</description>
    </item>
    
    <item>
      <title>Go高级编程 - Golang逃逸分析</title>
      <link>https://nicko-ch.github.io/posts/golang/20220106-go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B-golang%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://nicko-ch.github.io/posts/golang/20220106-go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B-golang%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</guid>
      <description>Golang逃逸分析 1、 原理 go语言编译器会自动决定把一个变量放在栈还是放在堆，编译器会做**逃逸分析(escape analysis)**，**当发现变量的作用域没有跑出函数范围，就可以在栈上，反之则必须分配在堆。**
2、如何分析 2.1、案例 package main func foo(arg_val int) (*int) { var foo_val1 int = 11; var foo_val2 int = 12; var foo_val3 int = 13; var foo_val4 int = 14; var foo_val5 int = 15; //此处循环是防止go编译器将foo优化成inline(内联函数)  //如果是内联函数，main调用foo将是原地展开，所以foo_val1-5相当于main作用域的变量  //即使foo_val3发生逃逸，地址与其他也是连续的  for i := 0; i &amp;lt; 5; i++ { println(&amp;amp;arg_val, &amp;amp;foo_val1, &amp;amp;foo_val2, &amp;amp;foo_val3, &amp;amp;foo_val4, &amp;amp;foo_val5) } //返回foo_val3给main函数  return &amp;amp;foo_val3; } func main() { main_val := foo(666) println(*main_val, main_val) } 运行结果</description>
    </item>
    
    <item>
      <title>Go高级编程 - 性能监测与优化实践方法</title>
      <link>https://nicko-ch.github.io/posts/golang/20220101-go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B-%E6%80%A7%E8%83%BD%E7%9B%91%E6%B5%8B%E4%B8%8E%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://nicko-ch.github.io/posts/golang/20220101-go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B-%E6%80%A7%E8%83%BD%E7%9B%91%E6%B5%8B%E4%B8%8E%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5%E6%96%B9%E6%B3%95/</guid>
      <description>性能监测与优化实践方法 场景1：如何分析程序的运行时间与CPU利用率情况？ （1）shell内置time指令 $ time go run test2.go &amp;amp;{{0 0} 张三 0} real	0m0.843s user	0m0.216s sys	0m0.389s  real ：从程序开始到结束，实际使用时间； user ：程序在用户态使用时间； sys ：程序在内核态使用时间。  一般情况下 real &amp;gt;= user + sys，因为系统还有其它进程(切换其他进程中间对于本进程会有空白期)。
（2）/user/bin/time 指令 使用时需要输入决定路径，带上参数-v
$ /usr/bin/time -v go run test2.go Command being timed: &amp;#34;go run test2.go&amp;#34; User time (seconds): 0.12 System time (seconds): 0.06 Percent of CPU this job got: 115% Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16 Average shared text size (kbytes): 0 Average unshared data size (kbytes): 0 Average stack size (kbytes): 0 Average total size (kbytes): 0 Maximum resident set size (kbytes): 41172 Average resident set size (kbytes): 0 Major (requiring I/O) page faults: 1 Minor (reclaiming a frame) page faults: 15880 Voluntary context switches: 897 Involuntary context switches: 183 Swaps: 0 File system inputs: 256 File system outputs: 2664 Socket messages sent: 0 Socket messages received: 0 Signals delivered: 0 Page size (bytes): 4096 Exit status: 0  CPU占用率； 内存使用情况； Page Fault 情况； 进程切换情况； 文件系统IO； Socket 使用情况； ……  场景2：如何分析golang程序的内存使用情况？ （1）内存占用情况查看 场景例子代码demo</description>
    </item>
    
    <item>
      <title>Go高级编程 - Benchmark</title>
      <link>https://nicko-ch.github.io/posts/golang/20210220-go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B-benchmark/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nicko-ch.github.io/posts/golang/20210220-go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B-benchmark/</guid>
      <description>基础用法  benchmark和普通单元测试用例一样，文件命名都为 _test.go 函数名以 Benchmark 开头，参数是 b *testing.B。 对比普通的单元测试用例： 函数名以 Test 开头，参数是 t *testing.T。  运行用例 基础用例  运行当前 package 内的用例：go test example 或 go test . 运行子 package 内的用例： go test example/&amp;lt;package name&amp;gt; 或 go test ./&amp;lt;package name&amp;gt; 如果想递归测试当前目录下的所有的 package：go test ./... 或 go test example/...。  $ go test -bench . goos: darwin goarch: amd64 pkg: example BenchmarkFib-8 200 5865240 ns/op PASS ok example 1.782s  正则匹配，例：只运行以 Fib 结尾的benchmark用例  $ go test -bench=&amp;#39;Fib$&amp;#39; .</description>
    </item>
    
    <item>
      <title>Go高级编程 - GMP并发模型</title>
      <link>https://nicko-ch.github.io/posts/golang/20210207-go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B-gmp%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nicko-ch.github.io/posts/golang/20210207-go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B-gmp%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/</guid>
      <description>Golang&amp;quot;调度器&amp;quot;由来 单进程时代  单一执行流程，CPU只能顺序的执行任务队列 进程阻塞导致CPU占用，浪费硬件资源，影响执行效率  多进程、多线程时代  设计变得复杂  进程/线程的数量越多，切换CPU执行时间片成本越大 多线程随着同步竞争（如 锁、竞争资源冲突等）   缺点  高内存占用 （进程：虚拟内存4G；线程：约4MB） 高CPU调度消耗    协程（co-routine）  N:1  无法利用多个CPU 出现阻塞的瓶颈   1:1  跟多线程/多进程模型无异 协程切换成本高   M:N  能够利用多核 过于依赖协程调度器的优化和算法    调度器的优化  早期Go调度器  基本的全局Go队列和比较传统的轮询利用多个thread去调度 弊端  创建、销毁、调度G都需要每个M获取锁，形成了激烈的锁竞争 M转移G会造成延迟和额外的系统负载 系统调用（CPU在M之间的切换）导致频繁的线程阻塞和取消阻塞的操作增加了系统的开销     Goroutine优化  内存占用低（几KB，大量开辟） 灵活调度，切换成本低    GMP模型的设计思想 GMP模型简介 GMP
 G：goroutine 携程 P：processor 处理器 M：thread 内核线程</description>
    </item>
    
    <item>
      <title>Go高级编程 - GC垃圾回收原理</title>
      <link>https://nicko-ch.github.io/posts/golang/20210105-go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B-gc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nicko-ch.github.io/posts/golang/20210105-go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B-gc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%8E%9F%E7%90%86/</guid>
      <description>标记清除法  STW（stop the world）→ 标记对象依赖关系 → 清楚待回收对象 → 结束STW
 步骤：
 暂停程序业务逻辑, 找出不可达的对象，和可达对象。 开始标记，程序找出它所有可达的对象，并做上标记。 开始清除未标记对象。 停止STW，让程序恢复运行。  缺点：
 STW严重影响程序的运行效率 标记需要扫描整个heap 清除数据也会导致产生多余的heap碎片  优化：
 将步骤3和4互换位置，缩短STW的范围  三色标记法  白色：待回收对象 灰色：待扫描对象 黑色：已扫描对象
 目标：处理完所有灰色的对象为止
  步骤：
  将所有的对象标记为默认颜色“白色”
  从根节点（Root Set）出发，遍历将被根节点引用的对象标记为&amp;quot;灰色&amp;quot;
  遍历灰色集合，将灰色对象引用的白色对象标记为“灰色”，然后将遍历完的灰色对象标记为“黑色”
  重复步骤3，直到灰色集合中无任何对象
  最后回收所有白色集合对象
  缺点（不启动STW保护）：
有可能造成对象丢失，即过程中黑色对象引用了白色对象，同时白色对象丢失了灰色对象的关系，导致GC把黑色对象引用的白色对象被回收
需同时满足两条件：
 一个白色对象被黑色对象引用（白色被挂载到黑色下） 灰色对象与被挂载的白色对象关系遭到破坏（灰色同时丢失了白色的挂载）  强弱三色不变式 强三色不变式  强制性不允许黑色对象引用白色对象（破坏条件1）
 弱三色不变式  允许黑色对象引用白色对象，但白色对象必须存在链路上游有灰色对象保持有引用关系（破坏条件2）</description>
    </item>
    
    <item>
      <title>Go高级编程 - 基础</title>
      <link>https://nicko-ch.github.io/posts/golang/20210104-go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nicko-ch.github.io/posts/golang/20210104-go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B-%E5%9F%BA%E7%A1%80/</guid>
      <description>Advanced new() 和 make() 的区别 看起来二者没有什么区别，都在堆上分配内存，但是它们的行为不同，适用于不同的类型。
 new(T) 为每个新的类型T分配一片内存，初始化为 0 并且返回类型为*T的内存地址：这种方法 返回一个指向类型为 T，值为 0 的地址的指针，它适用于值类型如数组和结构体；它相当于 &amp;amp;T{}。 make(T) 返回一个类型为 T 的初始值，它只适用于3种内建的引用类型：切片、map 和 channel。  换言之，new 函数分配内存，make 函数初始化；下图给出了区别：
译者注：如何理解new、make、slice、map、channel的关系
1.slice、map以及channel都是golang内建的一种引用类型，三者在内存中存在多个组成部分， 需要对内存组成部分初始化后才能使用，而make就是对三者进行初始化的一种操作方式
2. new 获取的是存储指定变量内存地址的一个变量，对于变量内部结构并不会执行相应的初始化操作， 所以slice、map、channel需要make进行初始化并获取对应的内存地址，而非new简单的获取内存地址
 fmt函数参数说明 基本
%v	the value in a default formatwhen printing structs, the plus flag (%+v) adds field names%#v	a Go-syntax representation of the value%T	a Go-syntax representation of the type of the value%%	a literal percent sign; consumes no valueThe default format for %v is:</description>
    </item>
    
    <item>
      <title>Go优秀开源项目分享</title>
      <link>https://nicko-ch.github.io/posts/golang/20201231-go%E4%BC%98%E7%A7%80%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%88%86%E4%BA%AB/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nicko-ch.github.io/posts/golang/20201231-go%E4%BC%98%E7%A7%80%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%88%86%E4%BA%AB/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Refference - Go高级编程</title>
      <link>https://nicko-ch.github.io/posts/golang/20201221-refference-go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nicko-ch.github.io/posts/golang/20201221-refference-go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/</guid>
      <description>Title Link Description     Golang深入理解GPM模型 https://www.bilibili.com/video/BV19r4y1w7Nx    Golang中GC回收机制三色标记与混合写屏障 https://www.bilibili.com/video/BV1wz4y1y7Kd    Golang修养之路 https://www.kancloud.cn/aceld/golang/1858955    Go语言规范 https://golang.google.cn/ref/spec    GO 命令教程 https://github.com/hyper0x/go_command_tutorial    Go 语言性能优化 https://cch123.github.io/perf_opt/    图解 Go pprof 收集数据的工作流 https://mp.weixin.qq.com/s/HQzz2NQ2lSg_LLsNB7C-mw    7天用Go从零实现Web框架Gee教程 https://geektutu.com/post/gee.html    build-web-application-with-golang https://github.com/astaxie/build-web-application-with-golang    B站最深度的Golang学习到实战 up主强力推荐 https://www.bilibili.com/video/BV1TK4y1a7ex    Go contributor 解答：关于 Go GC 的 20 个核心问题 https://blog.</description>
    </item>
    
  </channel>
</rss>
